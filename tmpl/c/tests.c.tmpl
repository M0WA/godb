#ifdef _DB_TEST_VERSION

/* ==============================================================
   this is generated code, changes will be overwritten
   ============================================================== */

#include "tests.h"

#include <stdlib.h>
#include <string.h>

#include "db.h"
#include "table.h"
#include "column.h"
#include "tables.h"
#include "statements.h"
#include "selectresult.h"
#include "stringbuf.h"
#include "logger.h"
#include "keys.h"

static int serial = 0;
{{ $td := . }}{{ range $db := $td.L.Databases }}{{ range $tbl := $db.Tables }}{{ if eq $tbl.Name "complextable3" }}
static void test_table_upsert_check_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	int rc = 0;
	size_t rowcount = 0;
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} upsert results");

	const DBTableDef *tbldef = {{ $db.Name }}_{{ $tbl.Name }}_tbldef();

	SelectStmt stmt;
	create_select_stmt(&stmt,tbldef);

	size_t tmp = (serial == 11 ? 9 : serial - 1);
	char buf[16] = {0};
	snprintf(buf,16,"%zu",tmp);

	struct _WhereCondition cond;
	memset(&cond,0,sizeof(struct _WhereCondition));
	cond.cond = WHERE_EQUAL;
	cond.type = WHERE_COND;
	cond.def = &(tbldef->cols[5]);
	cond.values = (const void*[]){&buf};
	cond.cnt = 1;

	if( where_append(&stmt.where,(union _WhereStmt *)&cond) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: cannot append where stmt"); }

	SelectResult res;
	memset(&res,0,sizeof(SelectResult));

	if( select_db(dbh,&stmt,&res) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while select"); }

	while( (rc = fetch_db(dbh,&res)) > 0){
		StringBuf buf;
		stringbuf_init(&buf,512);
		dump_selectresult(&res,&buf);
		if(stringbuf_get(&buf)) {
			LOGF_DEBUG("%s",stringbuf_get(&buf)); }
		stringbuf_destroy(&buf);
		const double *tf = (const double *)res.tbl.rows.buf[0][4];
		if(*tf != 12.12) {
			double tmpd = *tf;
			LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid values while fetch: %f != 12.12",tmpd); }
		rowcount++;
	}
		
	LOGF_DEBUG("fetched %lu rows",rowcount);	
	if(rc != 0 || rowcount != 1 ) {
		LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while fetch: rows: %lu, rc: %d",rowcount,rc); }	

	destroy_select_stmt(&stmt);
	destroy_selectresult(&res);
}

static void test_table_upsert_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} upsert");

	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);

	(*{{ $db.Name }}_{{ $tbl.Name }}_set_testfloat(&tbl,0)) = 12.12;
	
	size_t tmp = (serial == 11 ? 9 : serial - 1);
	snprintf(({{ $db.Name }}_{{ $tbl.Name }}_set_testuniq(&tbl,0)),10,"%zu",tmp);

	UpsertStmt stmt;
	create_upsert_stmt(&stmt,&tbl.dbtbl);
	
	if(upsert_db(dbh,&stmt)) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while upsert"); }
	
	destroy_dbtable(&tbl.dbtbl);
	
	test_table_upsert_check_{{ $db.Name }}_{{ $tbl.Name }}(dbh);
}
{{ end }}{{ if eq $tbl.Name "complextable2" }}
static void test_table_foreignkey_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} foreignkey/index");
	const DBTableDef *tbldef = {{ $db.Name }}_{{ $tbl.Name }}_tbldef();

	SelectStmt stmt;
	create_select_stmt(&stmt,tbldef);
	
	const char test[] = "test";
	const char **values = (const char*[]){test};
	
	struct _WhereCondition w;	
	if( {{ $db.Name }}_{{ $tbl.Name }}_by_idx_teststr(values,1,&w) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while index key test"); }
	if( where_append(&stmt.where,(union _WhereStmt*)&w) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while foreign key test");}	
	if( {{ $db.Name }}_{{ $tbl.Name }}_join_testfk(&stmt,DBJOIN_TYPE_LEFT) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error: {{ $db.Name }}_{{ $tbl.Name }}_join_testfk()"); }
		
	SelectResult res;
	memset(&res,0,sizeof(SelectResult));

	if( select_db(dbh,&stmt,&res) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while select"); }

	int rc = 0;
	size_t rowcount = 0;
	while( (rc = fetch_db(dbh,&res)) > 0){
		StringBuf buf;
		stringbuf_init(&buf,512);
		dump_selectresult(&res,&buf);
		if(stringbuf_get(&buf)) {
			LOGF_DEBUG("%s",stringbuf_get(&buf)); }
		stringbuf_destroy(&buf);
		rowcount++;
	}
		
	LOGF_DEBUG("fetched %lu rows",rowcount);	
	if(rc != 0 || rowcount != 4 ) {
		LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while fetch: rows: %lu, rc: %d",rowcount,rc); }	

	destroy_select_stmt(&stmt);
	destroy_selectresult(&res);
}
{{ end }}
static void test_table_update_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} update");

	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);

	int id = 10;

	struct _WhereCondition cond;
	memset(&cond,0,sizeof(struct _WhereCondition));
	cond.cond = WHERE_NOT_EQUAL;
	cond.type = WHERE_COND;
	cond.def = &(tbl.dbtbl.def->cols[0]);
	cond.values = (const void*[]){&id};
	cond.cnt = 1;

	double *tf = {{ $db.Name }}_{{ $tbl.Name }}_set_testfloat(&tbl,0);
	*tf = 11.11;
	
	UpdateStmt stmt;
	create_update_stmt(&stmt,&tbl.dbtbl);

	if( where_append(&stmt.where,(union _WhereStmt *)&cond) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: cannot append where stmt"); }

	if(update_db(dbh,&stmt)) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while update"); }

	destroy_update_stmt(&stmt);
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_delete_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} delete");

	DeleteStmt stmt;
	create_delete_stmt(&stmt,{{ $db.Name }}_{{ $tbl.Name }}_tbldef());

	int id = 10;

	struct _WhereCondition cond;
	memset(&cond,0,sizeof(struct _WhereCondition));
	cond.cond = WHERE_NOT_EQUAL;
	cond.type = WHERE_COND;
	cond.def = &(stmt.def->cols[0]);
	cond.values = (const void*[]){&id};
	cond.cnt = 1;

	if( where_append(&stmt.where,(union _WhereStmt *)&cond) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: cannot append where stmt"); }

	if(delete_db(dbh,&stmt)) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while delete"); }

	destroy_delete_stmt(&stmt);
}

static void test_table_check_selectresult_{{ $db.Name }}_{{ $tbl.Name }}(SelectResult *res) {
	for(size_t col = 0; col < res->tbl.def->ncols; col++) {
		if( strcasecmp(res->tbl.def->cols[col].name,"ID") == 0 ) {			
			if( (*(unsigned long long*)res->tbl.rows.buf[0][col]) == 0 ) {
				LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid ID in select result");	}
		} else if( strcasecmp(res->tbl.def->cols[col].name,"testint") == 0 ) {
			if( (*(long long*)res->tbl.rows.buf[0][col]) != 10 ) {
				LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid testint in select result: %ld",*((long long*)res->tbl.rows.buf[0][col])); }
		} else if( strcasecmp(res->tbl.def->cols[col].name,"testfloat") == 0 ) {
			if( (*(double*)res->tbl.rows.buf[0][col]) != 10.10 ) {
				LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid testfloat in select result"); }
		} else if( strcasecmp(res->tbl.def->cols[col].name,"teststr") == 0 ) {
			if( strcmp((const char*)res->tbl.rows.buf[0][col],"test") != 0 ) {
				LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid teststr in select result"); }
		}
	}
}

static void test_table_select_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh, int check) {
	int rc = 0;
	size_t rowcount = 0;
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} select");

	const DBTableDef *tbldef = {{ $db.Name }}_{{ $tbl.Name }}_tbldef();

	SelectStmt stmt;
	create_select_stmt(&stmt,tbldef);

	char test[] = "test";

	struct _WhereCondition cond;
	memset(&cond,0,sizeof(struct _WhereCondition));
	cond.cond = WHERE_EQUAL;
	cond.type = WHERE_COND;
	cond.def = &(tbldef->cols[1]);
	cond.values = (const void*[]){&test};
	cond.cnt = 1;

	if( where_append(&stmt.where,(union _WhereStmt *)&cond) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: cannot append where stmt"); }

	SelectResult res;
	memset(&res,0,sizeof(SelectResult));

	if( select_db(dbh,&stmt,&res) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while select"); }

	while( (rc = fetch_db(dbh,&res)) > 0){
		StringBuf buf;
		stringbuf_init(&buf,512);
		dump_selectresult(&res,&buf);
		if(stringbuf_get(&buf)) {
			LOGF_DEBUG("%s",stringbuf_get(&buf)); }
		stringbuf_destroy(&buf);
		if(check) {
			test_table_check_selectresult_{{ $db.Name }}_{{ $tbl.Name }}(&res);
		}
		rowcount++;
	}
		
	LOGF_DEBUG("fetched %lu rows",rowcount);	
	if(rc != 0 || (check && rowcount != 4) ) {
		LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: error while fetch: rows: %lu, rc: %d",rowcount,rc); }

	destroy_select_stmt(&stmt);
	destroy_selectresult(&res);
}

static void test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}({{ $db.Name }}_{{ $tbl.Name }}* tbl, size_t row) { {{ range $i,$col := $tbl.Columns }}
	// {{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }} {{ if eq $col.AutoIncrement false }}{{ if eq $col.Name "testuniq" }}	
	snprintf({{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row),10,"%d",serial);
	serial++;
	if(serial == 10) {
		serial++; }	{{ else if eq $col.DataType "string" }}		
	sprintf({{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row),"test"); {{ else if eq $col.DataType "datetime" }}
	time_t tt{{ $col.Name }} = time(0);
	memset({{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row),0,sizeof(struct tm));
	gmtime_r(&tt{{ $col.Name }},{{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row)); {{ else if eq $col.DataType "float" }}
	*({{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row)) = 10.10;	{{ else if eq $col.DataType "int" }} 
	*({{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(tbl,row)) = 10;{{ end }}{{/* end if */}}{{ end }}{{/* end if */}}
	{{ end }}{{/* columns */}}
}

static void test_table_checkpreset_{{ $db.Name }}_{{ $tbl.Name }}(const {{ $db.Name }}_{{ $tbl.Name }} *tbl, size_t row) { {{ range $i,$col := $tbl.Columns }}{{ if eq $col.AutoIncrement false }}
	if(! {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row) ) {
	 	LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: null value column"); }
	{{ if eq $col.Name "testuniq" }}
	{{ else if eq $col.DataType "datetime" }}{
		const struct tm *tmp = {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row);
		if (tmp->tm_year < 100 || tmp->tm_year > 1000) {
			LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: invalid datetime value"); }
	}
	{{ else if eq $col.DataType "string" }}{
		const char *tmp = {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row);
		if( strcmp(tmp,"test") != 0 ){
			LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: invalid value: %s",tmp); }
	}
	{{ else if eq $col.DataType "int" }}{		
		if( *({{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row)) != 10 ) {
			LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: invalid value: %d",*{{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row)); }
	}
	{{ else if eq $col.DataType "float" }} {
		if( *({{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row)) != 10.10 ) {
			LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: invalid value: %f",*{{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(tbl,row)); }
	}{{ end }}{{/* end if */}}
	{{ end }}{{/* end if */}}{{ end }}{{/* columns */}}
}

static void test_table_insert_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} single row insert");

	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);
	test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,0);

	InsertStmt s;
	create_insert_stmt(&s,&tbl.dbtbl);	
	if( insert_db(dbh,&s)) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: single table insert failed"); }
		
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_bulkinsert_{{ $db.Name }}_{{ $tbl.Name }}(DBHandle *dbh) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} multi row/bulk insert");
	
	INIT_TABLE_ROWS({{ $db.Name }},{{ $tbl.Name }},tbl,2);	
	test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,0);
	test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,1);
	
	InsertStmt s;
	create_insert_stmt(&s,&tbl.dbtbl);
	if( insert_db(dbh,&s)) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: bulk insert failed");}	
		
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_def_{{ $db.Name }}_{{ $tbl.Name }}(const struct _DBTableDef* def) {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} definition");
	if(!def) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: definition is null");}
	if(!def->name || strcmp(def->name,"{{ $tbl.Name }}") != 0) {
		LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: def->name: invalid table name: %s",def->name ? def->name : "NULL");}
	if(!def->database || strcmp(def->database,"{{ $db.Name }}") != 0) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: def->database: invalid db name");}
	if(def->ncols != {{ len $tbl.Columns }}) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: def->ncols: invalid column count");}
	if(!def->cols) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: def->cols is NULL");}
}

static void test_table_indexes_{{ $db.Name }}_{{ $tbl.Name }}(const {{ $db.Name }}_{{ $tbl.Name }}* tbl) { {{ range $i,$col := $tbl.Columns }}
	LOG_DEBUG("checking column {{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }} indexes");
	if( !tbl->dbtbl.def->cols[{{ $i }}].name
	 || strcmp(tbl->dbtbl.def->cols[{{ $i }}].name,"{{ $col.Name }}") != 0 ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: tbl->dbtbl.def->cols: invalid column for index"); } {{ end }}{{/* columns */}}
}

static void test_table_coldef_{{ $db.Name }}_{{ $tbl.Name }}(const {{ $db.Name }}_{{ $tbl.Name }}* tbl) { {{ range $i,$col := $tbl.Columns }}
	LOG_DEBUG("checking column {{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }} definitions");
	if( !tbl->dbtbl.def->cols[{{ $i }}].name || strcmp(tbl->dbtbl.def->cols[{{ $i }}].name,"{{ $col.Name }}") != 0) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: tbl->dbtbl.def->cols: invalid column name"); }
	if( !tbl->dbtbl.def->cols[{{ $i }}].table || strcmp(tbl->dbtbl.def->cols[{{ $i }}].table,"{{ $tbl.Name }}") != 0) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: tbl->dbtbl.def->cols: invalid table name"); }
	if( !tbl->dbtbl.def->cols[{{ $i }}].database || strcmp(tbl->dbtbl.def->cols[{{ $i }}].database,"{{ $db.Name }}") != 0) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: tbl->dbtbl.def->cols: invalid database name"); } {{ end }}{{/* columns */}}
}

static void test_table_getset_{{ $db.Name }}_{{ $tbl.Name }}() {
	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);
	{{ range $i,$col := $tbl.Columns }}
	LOG_DEBUG("checking column {{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }} getter/setter");
	if( {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(&tbl,0) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: not initialized to null"); } {{ end }}{{/* columns */}}
	{{ range $i,$col := .Columns }}
	test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,0);
	test_table_checkpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,0);

	{{ $db.Name }}_{{ $tbl.Name }}_setnull_{{ $col.Name }}(&tbl,0);
	if( {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(&tbl,0) ) {
		LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: not null"); }	{{ end }}{{/* columns */}}
		
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_getset_multi_{{ $db.Name }}_{{ $tbl.Name }}() {
	INIT_TABLE_ROWS({{ $db.Name }},{{ $tbl.Name }},tbl,2);
	
	for(size_t row = 0 ; row < 2; row++) {
		{{ range $i,$col := $tbl.Columns }}
		LOG_DEBUG("checking column {{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }} getter/setter (multi table)");
		if( {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(&tbl,row) ) {
			LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: {{ $col.Name }}: not initialized to null"); } {{ end }}{{/* columns */}}
		{{ range $i,$col := .Columns }}
		test_table_columnpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,row);
		test_table_checkpreset_{{ $db.Name }}_{{ $tbl.Name }}(&tbl,row);
	
		{{ $db.Name }}_{{ $tbl.Name }}_setnull_{{ $col.Name }}(&tbl,row);
		if( {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(&tbl,row) ) {
			LOG_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}.{{ $col.Name }}: not null"); }	{{ end }}{{/* columns */}}
	}
		
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_uniq_{{ $db.Name }}_{{ $tbl.Name }}() {
	LOG_DEBUG("checking column {{ $db.Name }}.{{ $tbl.Name }} unique keys");

	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);
	
	if( tbl.dbtbl.def->nunique !=  {{ len $tbl.UniqueKeys }} ) {
		LOGF_FATAL(1,"{{ $db.Name }}.{{ $tbl.Name }}: invalid uniq key count (%zu,%d)",tbl.dbtbl.def->nunique,{{ len $tbl.UniqueKeys }}); }

	UpsertStmt stmt;
	create_upsert_stmt(&stmt,&tbl.dbtbl);
	
	//TODO: test upserts
	
	destroy_dbtable(&tbl.dbtbl);
}

static void test_table_{{ $db.Name }}_{{ $tbl.Name }}() {
	LOG_DEBUG("checking table {{ $db.Name }}.{{ $tbl.Name }} instanciation");
	INIT_TABLE({{ $db.Name }},{{ $tbl.Name }},tbl);
	
	StringBuf buf;
	stringbuf_init(&buf,512);	
	dump_dbtabledef(tbl.dbtbl.def,&buf);	
	if(stringbuf_get(&buf)) {
		LOGF_DEBUG("%s",stringbuf_get(&buf)); }	
	stringbuf_destroy(&buf);
	
	test_table_def_{{ $db.Name }}_{{ $tbl.Name }}(tbl.dbtbl.def);
	test_table_indexes_{{ $db.Name }}_{{ $tbl.Name }}(&tbl);
	test_table_coldef_{{ $db.Name }}_{{ $tbl.Name }}(&tbl);
	test_table_getset_{{ $db.Name }}_{{ $tbl.Name }}();
	test_table_getset_multi_{{ $db.Name }}_{{ $tbl.Name }}();
	test_table_uniq_{{ $db.Name }}_{{ $tbl.Name }}();
	
	destroy_dbtable(&tbl.dbtbl);
}
{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}

void test_tables_static() { {{ $td := . }}{{ range $db := .L.Databases }}
	LOG_DEBUG("checking database {{ $db.Name }}");{{ range $tbl := $db.Tables }}
	test_table_{{ $db.Name }}_{{ $tbl.Name }}();{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}
	LOG_INFO("all static checks on generated tables: SUCCESS");
}

void test_tables_db(DBHandle *dbh) { {{ $td := . }}{{ range $db := .L.Databases }}
	LOG_DEBUG("checking database {{ $db.Name }}");{{ range $tbl := $db.Tables }}
	LOG_DEBUG("checking table {{ $db.Name }}");
	test_table_delete_{{ $db.Name }}_{{ $tbl.Name }}(dbh);
	test_table_insert_{{ $db.Name }}_{{ $tbl.Name }}(dbh);
	test_table_bulkinsert_{{ $db.Name }}_{{ $tbl.Name }}(dbh);
	test_table_select_{{ $db.Name }}_{{ $tbl.Name }}(dbh,1);
	test_table_update_{{ $db.Name }}_{{ $tbl.Name }}(dbh);{{ if eq $tbl.Name "complextable3" }}
	test_table_upsert_{{ $db.Name }}_{{ $tbl.Name }}(dbh);{{ end }}{{ if eq $tbl.Name "complextable2" }}
	test_table_foreignkey_{{ $db.Name }}_{{ $tbl.Name }}(dbh);{{ end }}
	test_table_delete_{{ $db.Name }}_{{ $tbl.Name }}(dbh);
	test_table_select_{{ $db.Name }}_{{ $tbl.Name }}(dbh,0);{{ end }}{{/* tables */}}
	LOG_DEBUG("all tables for {{ $db.Name }}: SUCCESS");{{ end }}{{/* databases */}}
	LOG_INFO("all dynamic checks on generated tables: SUCCESS");
}

#endif
