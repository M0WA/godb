#pragma once

#include <time.h>

#include "table.h"
{{ $td := . }}{{ with .L }}{{ range $db := .Databases }}{{ with $db }}{{ range $tbl := .Tables }}
/* ********************** table {{ $db.Name }}.{{ $tbl.Name }} ************************* */

#pragma pack(push, 1)
typedef struct _valbuf_{{ $db.Name }}_{{ $tbl.Name }} { {{ with $tbl }}{{ range $col := .Columns }}
	{{ $td.DataVar $col $col.Name }};{{ end }}{{ end }}{{/* columns */}}
} valbuf_{{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _colptr_{{ $db.Name }}_{{ $tbl.Name }} { {{ with $tbl }}{{ range $col := .Columns }}
	{{ $td.PtrVar $col $col.Name }};{{ end }}{{ end }}{{/* columns */}}
} colptr_{{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _{{ $db.Name }}_{{ $tbl.Name }}_impl {
	const struct _DBTableDef* def;
	const struct _colptr_{{ $db.Name }}_{{ $tbl.Name }}* p_colptr;
	struct _colptr_{{ $db.Name }}_{{ $tbl.Name }} colptr;
	struct _valbuf_{{ $db.Name }}_{{ $tbl.Name }} valbuf;
} {{ $db.Name }}_{{ $tbl.Name }}_impl;
#pragma pack(pop)

#pragma pack(push, 1)
typedef union _{{ $db.Name }}_{{ $tbl.Name }} {
	struct _DBTable dbtbl;
	struct _{{ $db.Name }}_{{ $tbl.Name }}_impl tbl;
} {{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

{{ $db.Name }}_{{ $tbl.Name }}* alloc_{{ $db.Name }}_{{ $tbl.Name }}();
void _create_{{ $db.Name }}_{{ $tbl.Name }}({{ $db.Name }}_{{ $tbl.Name }}* tbl);

{{ end }}{{ end }}{{/* tables */}}{{ end }}{{ end }}{{/* databases */}}