#pragma once

/* ==============================================================
   this is generated code, changes will be overwritten
   ============================================================== */

#include <stddef.h>
#include <time.h>

#include "table.h"

struct _DBColumnDef;
struct _WhereCondition;
struct _SelectStmt;
struct _SelectResult;
enum _DBJoinType;
{{ $td := . }}{{ $layouter := .LL }}{{ range $db := .L.Databases }}{{ range $tbl := $db.Tables }}
/* ********************** table {{ $db.Name }}.{{ $tbl.Name }} ************************* */

typedef struct _{{ $db.Name }}_{{ $tbl.Name }} {
	struct _DBTable dbtbl;
} {{ $db.Name }}_{{ $tbl.Name }};

// {{ $db.Name }}.{{ $tbl.Name }}: initializes a datastructure
int create_{{ $db.Name }}_{{ $tbl.Name }}({{ $db.Name }}_{{ $tbl.Name }} *tbl,size_t rows);

// {{ $db.Name }}.{{ $tbl.Name }}: returns table definition
const struct _DBTableDef* {{ $db.Name }}_{{ $tbl.Name }}_tbldef();
{{ range $col := $tbl.Columns }}
const struct _DBColumnDef* {{ $db.Name }}_{{ $tbl.Name }}_coldef_{{ $col.Name }}();
// {{ $db.Name }}.{{ $tbl.Name }}: getter/setter column {{ $col.Name }}
void {{ $db.Name }}_{{ $tbl.Name }}_unset_{{ $col.Name }}({{ $db.Name }}_{{ $tbl.Name }} *t,size_t row);
void {{ $db.Name }}_{{ $tbl.Name }}_setnull_{{ $col.Name }}({{ $db.Name }}_{{ $tbl.Name }} *t,size_t row);
{{ $td.PtrType $col }} {{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}({{ $db.Name }}_{{ $tbl.Name }} *t,size_t row);
const {{ $td.PtrType $col }} {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(const {{ $db.Name }}_{{ $tbl.Name }} *t,size_t row);
int {{ $db.Name }}_{{ $tbl.Name }}_result_idx_{{ $col.Name }}(struct _SelectResult *res,size_t *idx);
int {{ $db.Name }}_{{ $tbl.Name }}_result_{{ $col.Name }}(struct _SelectResult *res, const {{ $td.PtrType $col }}* val);
{{ end }}{{ range $idx := $tbl.IndexKeys }}{{ $col := $layouter.Column $db.Name $tbl.Name $idx.Column }}
int {{ $db.Name }}_{{ $tbl.Name }}_by_idx_{{ $idx.Column }}(const {{ $td.PtrType $col }} *vals,size_t valcnt,struct _WhereCondition *w);{{ end }}
{{ range $foreign := $tbl.ForeignKeys }}
int {{ $db.Name }}_{{ $tbl.Name }}_join_{{ $foreign.Column }}(struct _SelectStmt *s,enum _DBJoinType type);
{{ end }}{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}
const struct _DBTableDef* get_table_def_by_name(const char* dbname, const char* tblname);
