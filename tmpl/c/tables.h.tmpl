#pragma once

/* ==============================================================
   this is generated code, changes will be overwritten
   ============================================================== */

#include <stddef.h>
#include <time.h>

#include "table.h"

struct _DBColumnDef;
struct _UpsertStmt;
struct _DeleteStmt;
struct _SelectStmt;
struct _UniqKey;

{{ $td := . }}{{ range $db := .L.Databases }}{{ range $tbl := $db.Tables }}
/* ********************** table {{ $db.Name }}.{{ $tbl.Name }} ************************* */

#pragma pack(push, 1)
typedef struct _valbuf_{{ $db.Name }}_{{ $tbl.Name }} { {{ range $col := $tbl.Columns }}
	{{ $td.DataVar $col $col.Name }};{{ end }}{{/* columns */}}
} valbuf_{{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _colptr_{{ $db.Name }}_{{ $tbl.Name }} { {{ range $col := $tbl.Columns }}
	{{ $td.PtrVar $col $col.Name }};{{ end }}{{/* columns */}}
} colptr_{{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct _{{ $db.Name }}_{{ $tbl.Name }}_impl {
	const struct _DBTableDef *def;
	const struct _colptr_{{ $db.Name }}_{{ $tbl.Name }} *p_colptr;
	struct _colptr_{{ $db.Name }}_{{ $tbl.Name }} colptr;
	struct _valbuf_{{ $db.Name }}_{{ $tbl.Name }} valbuf;
	const struct _UniqKey *const *uniquekeys;
	size_t nunique;
	const struct _DBColumnDef *primarykey;
} {{ $db.Name }}_{{ $tbl.Name }}_impl;
#pragma pack(pop)

#pragma pack(push, 1)
typedef union _{{ $db.Name }}_{{ $tbl.Name }} {
	struct _DBTable dbtbl;
	struct _{{ $db.Name }}_{{ $tbl.Name }}_impl tbl;
} {{ $db.Name }}_{{ $tbl.Name }};
#pragma pack(pop)

// {{ $db.Name }}.{{ $tbl.Name }}: allocate a new initialized datastructure
{{ $db.Name }}_{{ $tbl.Name }}* alloc_{{ $db.Name }}_{{ $tbl.Name }}();

// {{ $db.Name }}.{{ $tbl.Name }}: initializes a datastructure
void _create_{{ $db.Name }}_{{ $tbl.Name }}({{ $db.Name }}_{{ $tbl.Name }} *tbl);

// {{ $db.Name }}.{{ $tbl.Name }}: initializes upsert statement
void upsertstmt_{{ $db.Name }}_{{ $tbl.Name }}(struct _UpsertStmt* s);

// {{ $db.Name }}.{{ $tbl.Name }}: initializes delete statement
void deletestmt_{{ $db.Name }}_{{ $tbl.Name }}(struct _DeleteStmt* s);

// {{ $db.Name }}.{{ $tbl.Name }}: initializes select statement
void selectstmt_{{ $db.Name }}_{{ $tbl.Name }}(struct _SelectStmt* s);
{{ range $col := $tbl.Columns }}
void {{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}({{ $db.Name }}_{{ $tbl.Name }} *tbl, const {{ $td.PtrVar $col $col.Name }});
const {{ $td.PtrType $col }} {{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(const {{ $db.Name }}_{{ $tbl.Name }} *tbl);{{ end }}{{/* columns */}}
{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}