#include "tables.h"

#include <string.h>
#include <stdlib.h>

#include "db.h"
#include "column.h"
#include "table.h"
{{ $td := . }}{{ range $db := .L.Databases }}
const char c_{{ $db.Name }}[] = "{{ $db.Name }}"; {{ range $tbl := $db.Tables }}

/* ********************** table {{ $db.Name }}.{{ $tbl.Name }} ************************* */

const char c_{{ $db.Name }}_{{ $tbl.Name }}[] = "{{ $tbl.Name }}";{{ range $col := $tbl.Columns }}
const char c_{{ $db.Name }}_{{ $tbl.Name }}_{{ $col.Name }}[] = "{{ $col.Name }}";{{ end }}{{/* columns */}}

static const struct _DBColumnDef coldefs_{{ $db.Name }}_{{ $tbl.Name }}[] = { {{ range $col := $tbl.Columns }}
	(struct _DBColumnDef){ 
		.type = COL_TYPE_{{ $col.DataType | ToUpper }},
		.name = c_{{ $db.Name }}_{{ $tbl.Name }}_{{ $col.Name }},
		.table = c_{{ $db.Name }}_{{ $tbl.Name }},
		.database = c_{{ $db.Name }},
		.size = {{ $td.SizeOf $col }},
		.autoincrement = {{ if $col.AutoIncrement }}1{{ else }}0{{ end }},
		.notnull = {{ if $col.NotNull }}1{{ else }}0{{ end }},
	}, {{ end }}{{/* columns */}}
};

static const struct _DBTableDef def_{{ $db.Name }}_{{ $tbl.Name }} = (struct _DBTableDef) {
	.name = c_{{ $db.Name }}_{{ $tbl.Name }},
	.database = c_{{ $db.Name }},
	.cols = (const struct _DBColumnDef*)&coldefs_{{ $db.Name }}_{{ $tbl.Name }},
	.ncols = {{ len $tbl.Columns }},
};

void _create_{{ $db.Name }}_{{ $tbl.Name }}({{ $db.Name }}_{{ $tbl.Name }} *tbl) {
	tbl->tbl.def = &def_{{ $db.Name }}_{{ $tbl.Name }};
	//tbl->tbl.bytepos = &bytepos_{{ $db.Name }}_{{ $tbl.Name }};
	memset(&(tbl->tbl.valbuf),0,sizeof(struct _valbuf_{{ $db.Name }}_{{ $tbl.Name }}));	
{{ range $col := $tbl.Columns }}
	tbl->tbl.colptr.{{ $col.Name }} = 0;
{{ end }}{{/* columns */}}
	tbl->tbl.p_colptr = &(tbl->tbl.colptr);
}

{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}