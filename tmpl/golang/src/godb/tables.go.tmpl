package godb
{{ $td := . }}
/* ==============================================================
   this is generated code, changes will be overwritten
   ============================================================== */

/*
#define _XOPEN_SOURCE 
#define _GNU_SOURCE

#include <db.h>
#include <table.h>
#include <tables.h>
#include <statements.h>
#include <stddef.h>
#include <stdlib.h>

{{ range $db := .L.Databases }}{{ range $tbl := $db.Tables }}
static const struct _DBTable *get_dbtbl_{{ $db.Name }}_{{ $tbl.Name }}(const {{ $db.Name }}_{{ $tbl.Name }} *t) {
	return &(t->dbtbl);
} 

static DeleteStmt *alloc_deletestmt_{{ $db.Name }}_{{ $tbl.Name }}() {
	DeleteStmt *s = calloc(1,sizeof(DeleteStmt));
	deletestmt_{{ $db.Name }}_{{ $tbl.Name }}(s);
	return s;
} {{ end }}{{/* tables */}}{{ end }}{{/* databases */}}
*/
import "C"

import (
	"errors"
	"unsafe"
	"runtime"
)
{{ $td.Imports }}{{ range $db := .L.Databases }}{{ range $tbl := $db.Tables }}
/* ==============================================================
   table {{ $db.Name }}.{{ $tbl.Name }}
   ============================================================== */
   
/*
	{{ $db.Name }}_{{ $tbl.Name }} is an interface to access data/columns of {{ $db.Name }}.{{ $tbl.Name }} table
*/
type {{ $db.Name }}_{{ $tbl.Name }} interface { {{ range $col := $tbl.Columns }}
	Get_{{ $col.Name }}()*{{ $td.DataType $col }}
	Set_{{ $col.Name }}({{ $td.DataType $col }}){{ end }}{{/* columns */}}
	ToNative()*C.{{ $db.Name }}_{{ $tbl.Name }}
	ToNativeDBTable()*C.DBTable
}

type {{ $db.Name }}_{{ $tbl.Name }}_impl struct {
	tbl *C.{{ $db.Name }}_{{ $tbl.Name }}
}

/*
	New_{{ $db.Name }}_{{ $tbl.Name }} creates a new instance of a {{ $db.Name }}_{{ $tbl.Name }} interface
*/
func New_{{ $db.Name }}_{{ $tbl.Name }}(){{ $db.Name }}_{{ $tbl.Name }} {
	t := new({{ $db.Name }}_{{ $tbl.Name }}_impl)
	t.tbl = C.alloc_{{ $db.Name }}_{{ $tbl.Name }}()	
	runtime.SetFinalizer(t, free_{{ $db.Name }}_{{ $tbl.Name }})
	return t
}

func free_{{ $db.Name }}_{{ $tbl.Name }}(tbl *{{ $db.Name }}_{{ $tbl.Name }}_impl) {
	if tbl.tbl != nil {
		C.free(unsafe.Pointer(tbl.tbl))
	}
}

/*
	Insert_{{ $db.Name }}_{{ $tbl.Name }} inserts one or more rows into {{ $db.Name }}.{{ $tbl.Name }}
*/
func Insert_{{ $db.Name }}_{{ $tbl.Name }}(dbh DBHandle, row {{ $db.Name }}_{{ $tbl.Name }})error {
	dbtbl := row.ToNativeDBTable()
	if C.insert_dbtable(dbh.ToNative(),&dbtbl,1) != 0 {
		return errors.New("error while insert")
	}
	return nil
}

func (t *{{ $db.Name }}_{{ $tbl.Name }}_impl)ToNative()*C.{{ $db.Name }}_{{ $tbl.Name }} {
	return t.tbl
}

func (t *{{ $db.Name }}_{{ $tbl.Name }}_impl)ToNativeDBTable()*C.DBTable {
	return C.get_dbtbl_{{ $db.Name }}_{{ $tbl.Name }}(t.ToNative())
}
{{ range $col := $tbl.Columns }}
/*
	Get_{{ $col.Name }} implements {{ $db.Name }}_{{ $tbl.Name }} interface
*/
func (t *{{ $db.Name }}_{{ $tbl.Name }}_impl)Get_{{ $col.Name }}()*{{ $td.DataType $col }} {
	v := C.{{ $db.Name }}_{{ $tbl.Name }}_get_{{ $col.Name }}(t.ToNative())
	if v == nil {
		return nil
	}
{{ if eq $col.DataType "string" }}
	str := C.GoString(v)
	return &str
{{ else if eq $col.DataType "datetime" }}
	timestamp := C.mktime(v)
	tm := time.Unix(int64(timestamp), 0)
	return &tm
{{ else if eq $col.DataType "float" }}
	f := {{ $td.DataType $col }}(*v)
	return &f
{{ else if eq $col.DataType "int" }}
	i := {{ $td.DataType $col }}(*v)
	return &i
{{ end }}
}

/*
	Set_{{ $col.Name }} implements {{ $db.Name }}_{{ $tbl.Name }} interface
*/
func (t *{{ $db.Name }}_{{ $tbl.Name }}_impl)Set_{{ $col.Name }}(v {{ $td.DataType $col }}){
{{ if eq $col.DataType "datetime" }}
	tmp := C.long(v.Unix())
	tm := new(C.struct_tm)
	tm = C.gmtime_r(&tmp, tm)
	C.{{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(t.ToNative(), tm)
{{ else if eq $col.DataType "string" }}
	tmp := C.CString(v)
	C.{{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(t.ToNative(), tmp)
	C.free(unsafe.Pointer(tmp))
{{ else }}
	tmp := {{ $td.CGoType $col }}(v)
	C.{{ $db.Name }}_{{ $tbl.Name }}_set_{{ $col.Name }}(t.ToNative(), &tmp)
{{ end }}
}
{{ end }}{{/* columns */}}{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}