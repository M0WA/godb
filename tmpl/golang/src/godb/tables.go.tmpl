package godb
{{ $td := . }}
/* ==============================================================
   this is generated code, changes will be overwritten
   ============================================================== */

/*
#include "table.h"
#include "tables.h"
#include "statements.h"
*/
import "C"

import (
	"runtime"
)
{{ $td.Imports }}
{{ range $db := .L.Databases }}{{ range $tbl := $db.Tables }}{{ $tblif := printf "%s_%s" (Title $db.Name) (Title $tbl.Name) }}{{ $tblimpl := printf "%s_%s_Impl" (Title $db.Name) (Title $tbl.Name) }}
/* ==============================================================
   table {{ $db.Name }}.{{ $tbl.Name }}
   ============================================================== */
type {{ $tblif }} interface { {{ range $col := $tbl.Columns }}
	// {{ Title $col.Name }} returns pointer to value of column {{ $col.Name }}
	{{ Title $col.Name }}()*{{ $td.DataType $col }}{{ end }}
}

type {{ $tblimpl }} struct { 
	dbtbl DBTable
}

// New{{ $tblif }} creates a new instance of a {{ $tblif }} interface
func New{{ $tblif }}(rows uint32){{ $tblif }} {
	t := new({{ $tblimpl }})
	t.dbtbl = NewDBTable(t.TableDef(),rows)
	return t
}

// CTable implements DBTable interface
func (t *{{ $tblimpl }})CTable()*C.DBTable {
	return t.dbtbl.CTable()
}

// TableDef implements DBTable interface
func (*{{ $tblimpl }})TableDef()DBTableDef {	
	return NewDBTableDef(C.{{ $db.Name }}_{{ $tbl.Name }}_tbldef())
}
{{ range $col := $tbl.Columns }}
// {{ Title $col.Name }} implements {{ $tblif }} interface
func (t *{{ $tblimpl }}){{ Title $col.Name }}()*{{ $td.DataType $col }} {
	return nil
}{{ end }}

// CInsertStmt implements InsertStmt interface
func (t *{{ $tblimpl }})CInsertStmt()*C.InsertStmt {
	stmt := &C.InsertStmt{} 
	if C.create_insert_stmt(stmt,t.CTable()) != 0 {
		return nil
	}
	return stmt
}

// CDeleteStmt implements DeleteStmt interface
func (*{{ $tblimpl }})CDeleteStmt()*C.DeleteStmt {
	stmt := &C.DeleteStmt{} 
	if C.create_delete_stmt(stmt,C.{{ $db.Name }}_{{ $tbl.Name }}_tbldef()) != 0 {
		return nil 
	}
	runtime.SetFinalizer(stmt, C.destroy_delete_stmt)
	return stmt
}

// CUpdateStmt implements UpdateStmt interface
func (t *{{ $tblimpl }})CUpdateStmt()*C.UpdateStmt {
	stmt := &C.UpdateStmt{} 
	if C.create_update_stmt(stmt,t.CTable()) != 0 {
		return nil
	}
	runtime.SetFinalizer(stmt, C.destroy_update_stmt)
	return stmt
}

// CUpsertStmt implements UpsertStmt interface
func (t *{{ $tblimpl }})CUpsertStmt()*C.UpsertStmt {
	stmt := &C.UpsertStmt{} 
	if C.create_upsert_stmt(stmt,t.CTable()) != 0 {
		return nil
	}
	return stmt
}

func (*{{ $tblimpl }})CSelectStmt()*C.SelectStmt {
	stmt := &C.SelectStmt{} 
	if C.create_select_stmt(stmt,C.{{ $db.Name }}_{{ $tbl.Name }}_tbldef()) != 0 {
		return nil
	}
	runtime.SetFinalizer(stmt, C.destroy_select_stmt)
	return stmt
}
{{ end }}{{/* tables */}}{{ end }}{{/* databases */}}
